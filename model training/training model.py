# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ca4AGSoxla9Oho7R7lgF89bfwQZsiY9D
"""

#the data set was from kaggle Stellar Classification Dataset - SDSS17

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

#checking datasetfile_path = '/content/drive/My Drive/star_classification.csv'
df = pd.read_csv(file_path)
df.head()

#checking for null values
null_values = df.isnull().sum()
print(null_values)

#the variable that has data of wheather galaxy,star or quasar object is class attribur so making that target variable
y = df['class']
X = df.drop(columns=['class'])
print(y.head())
print(X.head())

#importing libraries for evaluating in different methos
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

#considering random forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

#since 98% accurancy downloading the model
import joblib
model_filename = '/content/random_forest_model.pkl'
joblib.dump(model, model_filename)
from google.colab import files
files.download(model_filename)

#considering k-nearest neighbors methods
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
ynn_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, ynn_pred)
print(f'Accuracy: {accuracy:.2f}')
print("Classification Report:\n", classification_report(y_test, ynn_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, ynn_pred))

# considering descisiontree method
from sklearn.tree import DecisionTreeClassifier

decision_tree_model = DecisionTreeClassifier(random_state=42)
decision_tree_model.fit(X_train, y_train)
y_dt_pred = decision_tree_model.predict(X_test)
accuracy = accuracy_score(y_test, y_dt_pred)
print(f'Accuracy: {accuracy:.2f}')
print("Classification Report:\n", classification_report(y_test, y_dt_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_dt_pred))

#evaluating model based on F1 score,accurancy,precision
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, f1_score
import matplotlib.pyplot as plt
def evaluate_model(y_true, y_pred):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, average='weighted')
    f1 = f1_score(y_true, y_pred, average='weighted')
    return accuracy, precision, f1
rf_accuracy, rf_precision, rf_f1 = evaluate_model(y_test, y_pred)
knn_accuracy, knn_precision, knn_f1 = evaluate_model(y_test, ynn_pred)
dt_accuracy, dt_precision, dt_f1 = evaluate_model(y_test, y_dt_pred)
scores_df = pd.DataFrame({
    'Model': ['Random Forest', 'KNN', 'Decision Tree'],
    'Accuracy': [rf_accuracy, knn_accuracy, dt_accuracy],
    'Precision': [rf_precision, knn_precision, dt_precision],
    'F1-Score': [rf_f1, knn_f1, dt_f1]
})

scores_df.set_index('Model').plot(kind='bar', figsize=(10, 6))
plt.title('Model Comparison: Accuracy, Precision, and F1-Score')
plt.ylabel('Score')
plt.ylim(0, 1)
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.show()